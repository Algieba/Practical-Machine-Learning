g = g + xlab("Type of car") + ylab("MPG")
g
require(datasets);data(mtcars); require(stats); require(ggplot2)
g = ggplot(data = mtcars, aes(y = mpg, x = am, fill  = am))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of car") + ylab("MPG")
g
require(datasets);data(mtcars); require(stats); require(ggplot2)
g = ggplot(data = mtcars, aes(y = mpg, x = am, fill  = srpay))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of car") + ylab("MPG")
g
require(datasets);data(mtcars); require(stats); require(ggplot2)
g = ggplot(data = mtcars, aes(y = mpg, x = am, fill  = spray))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of car") + ylab("MPG")
g
require(datasets);data(mtcars); require(stats); require(ggplot2)
g = ggplot(data = mtcars, aes(y = mpg, x = am))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of car") + ylab("MPG")
g
require(datasets);data(mtcars); require(stats); require(ggplot2)
g = ggplot(data = mtcars, aes(y = mpg, x = as.factor(am)))
g = g + geom_violin(colour = "black", size = 2)
g = g + xlab("Type of car") + ylab("MPG")
g
require(datasets);data(mtcars); require(stats); require(ggplot2)
g = ggplot(data = mtcars, aes(y = mpg, x = as.factor(am)))
g = g + xlab("Type of car") + ylab("MPG")
g
require(datasets);data(mtcars); require(stats); require(ggplot2)
g = ggplot(data = mtcars, aes(y = mpg, x = as.factor(am)))
g = g + geom(colour = "black", size = 2)
g = g + xlab("Type of car") + ylab("MPG")
g
require(datasets);data(mtcars); require(stats); require(ggplot2)
g = ggplot(data = mtcars, aes(y = mpg, x = as.factor(am)))
g = g + geom_boxplot (colour = "black", size = 2)
g = g + xlab("Type of car") + ylab("MPG")
g
require(datasets);data(InsectSprays);
InsectSprays
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(mpg ~ as.factor(cyl)+wt, data = mtcars)
summary(fit)
mtcars
summary(fit)
data(mtcars)
fit <- lm(mpg ~ as.factor(cyl)+wt, data = mtcars)
fitua <- lm(mpg ~ as.factor(cyl)+wt-1, data = mtcars)
summary(fit)
summary(fitua)
fitua <- lm(mpg ~ as.factor(cyl), data = mtcars)
ata(mtcars)
fit <- lm(mpg ~ as.factor(cyl)+wt, data = mtcars)
fitua <- lm(mpg ~ as.factor(cyl), data = mtcars)
summary(fit)
summary(fitua)
```
data(mtcars)
fit <- lm(mpg ~ as.factor(cyl)+wt, data = mtcars)
fitua <- lm(mpg ~ as.factor(cyl), data = mtcars)
summary(fit)
summary(fitua)
data(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
?I()
data(mtcars)
fit <- lm(mpg ~ as.factor(cyl)+wt, data = mtcars)
fiti <- lm(mpg ~ as.factor(cyl)+wt , data = mtcars)
summary(fit)
summary(fiti)
?shuttle
shuttle$use
library (MASS)
shuttle$use
library (MASS)
shuttle$use <- factor(shuttle$use,labels=c(1,0))
shuttle$use
library (MASS)
shuttle$use <- factor(shuttle$use,labels=c(1,0))
fit <- glm(use ~ wind, data = MASS)
summary(fit)
library (MASS)
shuttle$use <- factor(shuttle$use,labels=c(1,0))
fit <- glm(use ~ wind, data = shuttle)
summary(fit)
?glm()
library (MASS)
shuttle$use <- factor(shuttle$use,labels=c(1,0))
fit <- glm(use ~ wind, data = shuttle, family = binomial)
summary(fit)
exp(fit$coeff)
shuttle$use == 0
shuttle[shuttle$use == 0,"use"]
shuttle$use2 <- as.numeric(shuttle$use)
shuttle$use2
library (MASS)
shuttle$use2 <- as.numeric(shuttle$use)
fit <- glm(use2 ~ factor(wind), data = shuttle, family = "binomial")
summary(fit)$coef
fit<-glm(1 - use2 ~ factor(wind), family = binomial, data = shuttle)
summary(fit)$coef
it2<-glm(1 - use2 ~ factor(wind), family = binomial, data = shuttle)
summary(fit2)$coef
fit2<-glm(1 - use2 ~ factor(wind), family = "binomial", data = shuttle)
summary(fit2)$coef
fit2<-glm(1 - use2 ~ factor(wind), family = "binomial", data = shuttle)
shuttle2<-shuttle
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
#shuttle2$wind2<-as.numeric(shuttle2$wind=='head')
#head(shuttle2)
fit<-glm(use2 ~ factor(wind) - 1, family = binomial, data = shuttle2)
fit<-glm(1 - use2 ~ factor(wind), family = binomial, data = shuttle2)
fit
shuttle2$use2
shuttle2<-shuttle
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
shuttle2$use2
factor(shuttle2$use,labels=c(1,0))
shuttle2$use2
shuttle$use
factor(shuttle$use,labels=c(1,0))
shuttle$use
library (MASS)
shuttle$use<- factor(shuttle$use,labels=c(1,0))
fit<-glm(use ~ factor(wind), family = binomial, data = shuttle)
summary(fit)$coef
fit<-glm(1 - use ~ factor(wind), family = binomial, data = shuttle)
summary(fit)$coef
library (MASS)
shuttle$use<-as.numeric(shuttle$use=='auto')
fit<-glm(use ~ factor(wind), family = binomial, data = shuttle)
summary(fit)$coef
fit<-glm(1 - use ~ factor(wind), family = binomial, data = shuttle)
summary(fit)$coef
fit<-glm(use ~ factor(wind), family = binomial, data = shuttle)
summary(fit)$coef
fit<-glm(1 - use ~ factor(wind), family = binomial, data = shuttle)
summary(fit)$coef
?InsectSprays
InsectSprays
exp(fit$coeff)
summary(fit)$coef
exp(fit$coeff)
head(shuttle)
library (MASS)
head(shuttle)
install_from_swirl("Regression Models")
library(swirl)
swirl()
install_from_swirl("Regression Models")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~ parent, data = galton)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef
ols.ic <- fit$coef[1]
ols.ic <- fit$coef[2]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(children)
varChild <- var(child)
varChild <- var(OLS)
q
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(fit$residuals)
mean(efit$residuals)
var(attenu$mag,efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
install.packages("caret")
install.packages("ISLR")
install.packages("Hmisc")
install.packages("AppliedPredictiveModeling")
library("ggplot2", lib.loc="~/R/win-library/3.1")
?createDataPartition()
?createDataPartition
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(ggplot2)
library(lattice)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
library(Hmisc)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
cut2(training$CompressiveStrength,cuts = 4)
qplot(as.factor(cut2(training$CompressiveStrength,cuts = 4)),colour=.,pch=19)
View(training)
cut2(training$CompressiveStrength, g = 4)
qplot(cut2(training$CompressiveStrength, g = 4),pch=19)
qplot(factor(cut2(training$CompressiveStrength), g = 4),pch=19)
factor(cut2(training$CompressiveStrength), g = 4)
qplot(factor(cut2(training$CompressiveStrength), g = 4)),pch=19)
factor(cut2(training$CompressiveStrength, g = 4))
qplot(factor(cut2(training$CompressiveStrength, g = 4)),pch=19)
qplot(factor(cut2(training$CompressiveStrength, g = 4)))
qplot(factor(cut2(training$CompressiveStrength, g = 4)), colour = .)
qplot(factor(cut2(training$CompressiveStrength, g = 4)), colour = ~.)
cut2(training$Cement), g = 4)
qplot(training$CompressiveStrength)
plot(training$CompressiveStrength)
View(training)
color <- factor(cut2(training$FineAggregate, g=4))
?hist()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$SuperPlasticizer
training[,"SuperPlasticizer"]
hist(training[,SuperPlasticizer])
training[,c("SuperPlasticizer")]
head(training,6)
head(training,16)
training[,5]
hist(training[,5])
?preProcress()
?preProcess()
data(spam)
library(kernlab)
install.packages("kernlab")
data(spam)
data(spam)
library("kernlab", lib.loc="~/R/win-library/3.1")
data(spam)
IL_trainig <- training[,grep("IL", colnames(training))]
grep("IL", colnames(training))
colnames(training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(training)
grep("IL", colnames(training))
training[,grep("IL", colnames(training))]
IL_trainig <- training[,grep("IL", colnames(training))]
View(IL_trainig)
?grep()
grep("^IL", colnames(training))
IL_trainig <- training[,grep("^IL", colnames(training))]
View(training)
View(IL_trainig)
View(training)
View(adData)
View(spam)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_predictor <- grep("^IL", colnames(training))
preProc <- preProcess(log10(training[,IL_predictor]+1), method="pca")
trainPC <- predict(preProc,log10(training[,IL_predictor]+1))
preProc <- preProcess(training[,IL_predictor], method="pca")
trainPC <- predict(preProc,training[,IL_predictor]))
trainPC <- predict(preProc,training[,IL_predictor])
modelfit <- train(training$diagnosis ~.,method="glm",data=trainPC)
install.packages("e1071")
modelfit <- train(training$diagnosis ~.,method="glm",data=trainPC)
modelfit
IL_predictor <- grep("^IL", colnames(training))
preProc <- preProcess(training[,IL_predictor], method="pca")
trainPC <- predict(preProc,training[,IL_predictor])
modelfit <- train(training$diagnosis ~.,method="lm",data=trainPC)
modelfit
?preProcess()
View(trainPC)
modelfit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
?subset()
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_predictor <- grep("^IL", colnames(training))
preProc <- preProcess(training[,IL_predictor], method="pca", thresh=0.80)
trainPC <- predict(preProc,training[,IL_predictor])
modelfit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
c(IL_predictor,"diagnosis")
colname(training)[IL_predictor]
colnames(training)[IL_predictor]
c(colnames(training)[IL_predictor],"diagnosis")
IL_training <- subset(training, select = c(colnames(training)[IL_predictor],"diagnosis"))
lm1 <- lm(diagnosis ~ ., data = IL_training)
summary(lm1)
IL_predictor <- grep("^IL", colnames(training))
preProc <- preProcess(training[,IL_predictor], method="pca", thresh=0.80)
trainPC <- predict(preProc,training[,IL_predictor])
modelfit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
modelfit
IL_training <- subset(training, select = c(colnames(training)[IL_predictor],"diagnosis"))
lm1 <- lm(factor(diagnosis) ~ ., data = IL_training)
summary(lm1)
preProc <- preProcess(log10(training[,,IL_predictor]+1),method="pca", thresh=0.80)
trainPC <- predict(preProc,log10(training[,IL_predictor]+1))
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,IL_training]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
preProc <- preProcess(log10(training[,,IL_predictor]+1),method="pca", thresh=0.80)
trainPC <- predict(preProc,log10(training[,IL_predictor]+1))
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
preProc <- preProcess(training[,,IL_predictor],method="pca", thresh=0.80)
trainPC <- predict(preProc,training[,IL_predictor])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,IL_training])
confusionMatrix(testing$type,predict(modelFit,testPC))
preProc <- preProcess(training[,,IL_predictor],method="pca", thresh=0.80)
preProc <- preProcess(training[,IL_predictor],method="pca", thresh=0.80)
trainPC <- predict(preProc,training[,IL_predictor])
testPC <- predict(preProc,testing[,IL_training])
library("ggplot2", lib.loc="~/R/win-library/3.1")
library("latticeExtra", lib.loc="~/R/win-library/3.1")
install.packages(c("colorspace", "data.table", "DBI", "devtools", "digest", "formatR", "Formula", "ggplot2", "gsubfn", "highr", "htmltools", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "manipulate", "markdown", "mime", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "RSQLite", "SparseM", "sqldf", "stringdist", "testthat", "UsingR", "waveslim", "xlsxjars", "zoo"))
install.packages(c("codetools", "mgcv"), lib="C:/AlgiebaLocal/1-DevTools/1-A+D/R-3.1.3/library")
install.packages(c("codetools", "mgcv"), lib = "C:/AlgiebaLocal/1-DevTools/1-A+D/R-3.1.3/library")
install.packages(c("codetools", "mgcv"), lib = "C:/AlgiebaLocal/1-DevTools/1-A+D/R-3.1.3/library")
install.packages(c("codetools", "mgcv"), lib = "C:/AlgiebaLocal/1-DevTools/1-A+D/R-3.1.3/library")
install.packages(c("codetools", "mgcv"), lib = "C:/AlgiebaLocal/1-DevTools/1-A+D/R-3.1.3/library")
install.packages(c("codetools", "mgcv"), lib = "C:/AlgiebaLocal/1-DevTools/1-A+D/R-3.1.3/library")
install.packages(c("codetools", "mgcv"), lib = "C:/AlgiebaLocal/1-DevTools/1-A+D/R-3.1.3/library")
install.packages(c("colorspace", "data.table", "DBI", "devtools", "digest", "formatR", "Formula", "ggplot2", "gsubfn", "highr", "htmltools", "httpuv", "httr", "jsonlite", "KernSmooth", "knitr", "manipulate", "markdown", "mime", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "RSQLite", "SparseM", "sqldf", "stringdist", "testthat", "UsingR", "waveslim", "xlsxjars", "zoo"))
install.packages(c("colorspace", "data.table", "DBI", "devtools",
install.packages(c("colorspace", "data.table", "DBI", "devtools", "digest", "formatR", "Formula", "ggplot2", "gsubfn", "highr"))
install.packages(c("colorspace", "data.table", "DBI", "devtools",
install.packages(c("colorspace", "data.table", "DBI"))
install.packages(c("devtools", "digest", "formatR"))
install.packages(c("devtools", "digest", "formatR"))
install.packages(c("devtools", "digest", "formatR"))
install.packages(c("Formula", "ggplot2", "gsubfn"))
install.packages(c("highr", "htmltools", "httpuv", "httr", "jsonlite", "KernSmooth"))
install.packages(c("knitr", "manipulate", "markdown", "mime", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "RSQLite", "SparseM", "sqldf", "stringdist", "testthat", "UsingR", "waveslim", "xlsxjars", "zoo"))
install.packages(c("R.methodsS3", "R.oo", "R.utils"))
install.packages("digest")
?read.delim()
+RTS -K16348
pml.training <- read.csv("S:/Algieba/3-Cursos/Data_Science/8-Practical Machine Learning/Proyecto/OriginalData/pml-training.csv", header=FALSE)
View(pml.training)
View(pml.training)
View(pml.training)
?grep()
?subset()
rawData <- read.csv("./OriginalData/pml-training.csv", header = TRUE)
rawData <- read.csv("./OriginalData/pml-training.csv", header = TRUE)
rawData <- read.csv("pml-training.csv", header = TRUE)
?cor()
library("caret", lib.loc="~/R/win-library/3.1")
install.packages("caret")
install.packages("ISLR")
library("ISLR", lib.loc="~/R/win-library/3.1")
library("caret", lib.loc="~/R/win-library/3.1")
?nearZeroVar()
library(ISRL)
library(caret)
library(caret)
library(mgcv)
install.packages("mgcv")
library(mgcv)
library(caret)
library(ISRL)
library(caret)
install.packages("ISRL")
install.packages("ISRL")
set.seed(1)
x <- matrix(rnorm(20), nrow=5, ncol=4)
y <- matrix(rnorm(15), nrow=5, ncol=3)
COR <- cor(x,y)
COR
image(x=seq(dim(x)[2]), y=seq(dim(y)[2]), z=COR, xlab="x column", ylab="y column")
text(expand.grid(x=seq(dim(x)[2]), y=seq(dim(y)[2])), labels=round(c(COR),2))
rawData <- read.csv("./OriginalData/pml-training.csv", header = TRUE)
library(caret)
prunedCol <- colnames(rawData)[grep("accel_belt|accel_forearm|accel_arm|accel_dumdell",
colnames(rawData))]
prunedData <- subset(rawData, select = c(prunedCol))
cor(prunedData$total_accel_belt,prunedData$accel_belt_x)
cor(prunedData$total_accel_belt,prunedData$accel_belt_y)
cor(prunedData$total_accel_belt,prunedData$accel_belt_z)
cor(prunedData$total_accel_belt,(prunedData$accel_belt_x*
prunedData$accel_belt_y*
prunedData$accel_belt_z))
nearZeroVar(prunedData,saveMetrics = TRUE)
cor(prunedData,prunedData)
rawData <- read.csv("./OriginalData/pml-training.csv", header = TRUE)
View(COR)
View(x)
pml.training <- read.csv("S:/Algieba/3-Cursos/Data_Science/8-Practical Machine Learning/Proyecto/OriginalData/pml-training.csv")
View(pml.training)
?subset()
?sqr()
?sqrt()
pml.testing <- read.csv("S:/Algieba/3-Cursos/Data_Science/8-Practical Machine Learning/Proyecto/OriginalData/pml-testing.csv")
View(pml.testing)
?format()
?createDataPartition()
library("caret", lib.loc="~/R/win-library/3.1")
?createDataPartition()
?trainControl()
rawData <- read.csv("./OriginalData/pml-training.csv", header = TRUE)
rawData <- read.csv("pml-training.csv", header = TRUE)
get.pwd()
setwd("S:/Algieba/3-Cursos/Data_Science/8-Practical Machine Learning/Proyecto/OriginalData")
rawData <- read.csv("pml-training.csv", header = TRUE)
prunedCol <- colnames(rawData)[grep("^total_",
colnames(rawData))]
studyData <- subset(rawData, select = c("classe",prunedCol))
library(lattice)
library(ggplot2)
library(caret)
set.seed(260668)
inTrain <- createDataPartition(y = studyData$classe,
p = 0.6,
list = FALSE)
head(inTrain,50)
trainingData <- studyData[inTrain,]
testingData <- studyData[-inTrain,]
set.seed(260668)
inTrain2 <- createDataPartition(y = studyData$classe,
p = 0.6,
list = FALSE)
head(inTrain - inTrain2,50)
prunedCol <- colnames(rawData)[grep("^total_",
colnames(rawData))]
prunedCol <- colnames(rawData)[grep("^total_accel_",
colnames(rawData))]
View(trainingData)
x = trainingData[,-2]
View(x)
x = trainingData[,-classe]
x = trainingData[,-"classe"]
View(trainingData)
x = trainingData[,-1]
View(x)
y = trainingData$classe
featurePlot (x = trainingData[,-1],
y = trainingData$classe,
plots = "pairs")
qplot(mpg, wt, data=mtcars, facets=vs ~ am)
View(x)
qplot (classe, (total_accel_forearm+total_accel_belt+total_accel_arm+total_accel_dumbbell), colour = classe, data = trainingData)
featurePlot (x = trainingData[,-1],
y = trainingData$classe,
plots = "pairs")
?featurePlot()
x <- matrix(rnorm(50*5),ncol=5)
y <- factor(rep(c("A", "B"),  25))
trellis.par.set(theme = col.whitebg(), warn = FALSE)
featurePlot(x, y, "ellipse")
featurePlot(x, y, "strip", jitter = TRUE)
featurePlot(x, y, "box")
featurePlot(x, y, "pairs")
featurePlot(x, y, "ellipse")
featurePlot(x, y, "strip", jitter = TRUE)
featurePlot(x, y, "box")
install.packages("corrplot")
